#Requires -Version 5.1

<#
.SYNOPSIS
    VRChat Webhook „ÉÜ„Çπ„ÉàÁî® PowerShell „Çπ„ÇØ„É™„Éó„Éà

.DESCRIPTION
    Google Apps Script „Åß‰ΩúÊàê„Åó„Åü VRChat ÈöúÂÆ≥ÈÄöÁü• Webhook „É¨„Ç∑„Éº„Éê„Éº„ÅÆÂãï‰Ωú„ÇíÊ§úË®º„Åô„Çã„Åü„ÇÅ„ÅÆ„ÉÜ„Çπ„Éà„Çπ„ÇØ„É™„Éó„Éà„Åß„Åô„ÄÇ
    Discord Embed„ÄÅVRChat Status Page„ÄÅÊ±éÁî®ÂΩ¢Âºè„ÅÆ3„Å§„ÅÆÂΩ¢Âºè„Åß„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÈÄÅ‰ø°„Åß„Åç„Åæ„Åô„ÄÇ

.PARAMETER WebhookUrl
    „ÉÜ„Çπ„ÉàÂØæË±°„ÅÆ Webhook URLÔºàÂøÖÈ†àÔºâ

.PARAMETER TestType
    „ÉÜ„Çπ„Éà„ÅÆÁ®ÆÈ°û„ÇíÊåáÂÆö (discord, statuspage, generic, all)
    „Éá„Éï„Ç©„É´„Éà: all

.PARAMETER Verbose
    Ë©≥Á¥∞„Å™„É≠„Ç∞„ÇíÂá∫Âäõ

.PARAMETER DelaySeconds
    „ÉÜ„Çπ„ÉàÈñì„ÅÆÂæÖÊ©üÊôÇÈñìÔºàÁßíÔºâ
    „Éá„Éï„Ç©„É´„Éà: 2

.EXAMPLE
    .\Test-VRChatWebhook.ps1 -WebhookUrl "https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec"
    
.EXAMPLE
    .\Test-VRChatWebhook.ps1 -WebhookUrl "https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec" -TestType discord
    
.EXAMPLE
    .\Test-VRChatWebhook.ps1 -WebhookUrl "https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec" -TestType all -Verbose
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory = $true, Position = 0)]
    [ValidateNotNullOrEmpty()]
    [string]$WebhookUrl,
    
    [Parameter(Mandatory = $false)]
    [ValidateSet("discord", "statuspage", "generic", "all")]
    [string]$TestType = "all",
    
    [Parameter(Mandatory = $false)]
    [int]$DelaySeconds = 2
)

# Ëâ≤‰ªò„Åç„É≠„Ç∞Âá∫ÂäõÁî®Èñ¢Êï∞
function Write-ColorLog {
    param(
        [string]$Message,
        [ConsoleColor]$Color = [ConsoleColor]::White,
        [string]$Prefix = ""
    )
    
    if ($Prefix) {
        Write-Host "$Prefix " -ForegroundColor $Color -NoNewline
        Write-Host $Message
    } else {
        Write-Host $Message -ForegroundColor $Color
    }
}

# „ÉÜ„Çπ„ÉàÁµêÊûú„ÇíÊ†ºÁ¥ç„Åô„Çã„ÇØ„É©„Çπ
class TestResult {
    [string]$TestName
    [bool]$Success
    [int]$StatusCode
    [string]$Response
    [string]$ErrorMessage
    [DateTime]$Timestamp
    
    TestResult([string]$testName) {
        $this.TestName = $testName
        $this.Timestamp = Get-Date
        $this.Success = $false
        $this.StatusCode = 0
        $this.Response = ""
        $this.ErrorMessage = ""
    }
}

# VRChat Webhook „ÉÜ„Çπ„Çø„Éº„ÇØ„É©„Çπ
class VRChatWebhookTester {
    [string]$WebhookUrl
    [System.Collections.Generic.List[TestResult]]$Results
    [int]$DelaySeconds
    
    VRChatWebhookTester([string]$webhookUrl, [int]$delaySeconds) {
        $this.WebhookUrl = $webhookUrl
        $this.DelaySeconds = $delaySeconds
        $this.Results = [System.Collections.Generic.List[TestResult]]::new()
    }
    
    # Discord EmbedÂΩ¢Âºè„ÅÆ„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê
    [hashtable] GetDiscordPayload() {
        $timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
        $testId = Get-Random -Minimum 1000 -Maximum 9999
        
        return @{
            embeds = @(
                @{
                    title = "üö® VRChat Service Alert - PowerShell Test"
                    description = "We are experiencing elevated error rates on our authentication services. Users may experience login difficulties."
                    color = 16711680  # Red
                    fields = @(
                        @{
                            name = "üìä Status"
                            value = "Investigating"
                            inline = $true
                        },
                        @{
                            name = "üîß Affected Services"
                            value = "Login, Friends, Invites"
                            inline = $true
                        },
                        @{
                            name = "üìà Impact Level"
                            value = "Major"
                            inline = $true
                        },
                        @{
                            name = "üïê Started At"
                            value = "<t:$([DateTimeOffset]::Now.ToUnixTimeSeconds()):R>"
                            inline = $true
                        },
                        @{
                            name = "üè∑Ô∏è Test ID"
                            value = "PS-$testId"
                            inline = $true
                        }
                    )
                    footer = @{
                        text = "VRChat Status System ‚Ä¢ PowerShell Test"
                        icon_url = "https://assets.vrchat.com/www/brand/vrchat-logo-white-transparent-crop-background.png"
                    }
                    timestamp = $timestamp
                    url = "https://status.vrchat.com/incidents/powershell-test-$testId"
                    author = @{
                        name = "VRChat Engineering"
                        icon_url = "https://assets.vrchat.com/www/brand/vrchat-logo-white-transparent-crop-background.png"
                    }
                    thumbnail = @{
                        url = "https://assets.vrchat.com/www/brand/vrchat-logo-white-transparent-crop-background.png"
                    }
                }
            )
            username = "VRChat Status Bot"
            avatar_url = "https://assets.vrchat.com/www/brand/vrchat-logo-white-transparent-crop-background.png"
        }
    }
    
    # VRChat Status PageÂΩ¢Âºè„ÅÆ„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê
    [hashtable] GetStatusPagePayload() {
        $timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
        $testId = Get-Random -Minimum 1000 -Maximum 9999
        
        return @{
            page = @{
                id = "vrchat-status"
                name = "VRChat Status"
                url = "https://status.vrchat.com"
                status_page = @{
                    url = "https://status.vrchat.com"
                }
            }
            incident = @{
                id = "incident-powershell-$testId"
                name = "Database Performance Degradation"
                status = "monitoring"
                created_at = $timestamp
                updated_at = $timestamp
                monitoring_at = $null
                resolved_at = $null
                impact = "minor"
                shortlink = "https://stspg.io/ps$testId"
                postmortem_body = ""
                postmortem_body_last_updated_at = $null
                postmortem_ignored = $false
                postmortem_notified_subscribers = $false
                postmortem_notified_twitter = $false
                postmortem_published_at = $null
                incident_updates = @(
                    @{
                        id = "update-$testId"
                        status = "monitoring"
                        body = "We have implemented a fix and are monitoring the situation. Database performance has returned to normal levels."
                        incident_id = "incident-powershell-$testId"
                        created_at = $timestamp
                        updated_at = $timestamp
                        display_at = $timestamp
                        affected_components = @(
                            @{
                                code = "database-cluster"
                                name = "Database Services"
                                old_status = "degraded_performance"
                                new_status = "operational"
                            }
                        )
                    }
                )
                components = @(
                    @{
                        id = "database-cluster"
                        name = "Database Services"
                        status = "operational"
                        created_at = $timestamp
                        updated_at = $timestamp
                        position = 1
                        description = "Primary database cluster"
                        showcase = $false
                        start_date = $null
                        group_id = $null
                        page_id = "vrchat-status"
                        group = $false
                        only_show_if_degraded = $false
                    }
                )
            }
            component = @{
                id = "database-cluster"
                name = "Database Services"
                status = "operational"
                created_at = $timestamp
                updated_at = $timestamp
            }
            meta = @{
                generated_at = $timestamp
                test_source = "PowerShell"
                test_id = $testId
            }
        }
    }
    
    # Ê±éÁî®ÂΩ¢Âºè„ÅÆ„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê
    [hashtable] GetGenericPayload() {
        $timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
        $testId = Get-Random -Minimum 1000 -Maximum 9999
          return @{
            title = "VRChat PowerShell Integration Test"
            description = "This is a comprehensive test alert generated by PowerShell script to validate the webhook processing system and ensure proper data handling across different payload structures."
            severity = "Medium"
            priority = "Normal"
            status = "Resolved"
            category = "Infrastructure"
            url = "https://status.vrchat.com/powershell-integration-test"
            timestamp = $timestamp
            source = "PowerShell Test Framework"
            environment = "Testing"
            version = "1.0.0"
            metadata = @{
                test_id = $testId
                script_name = "Test-VRChatWebhook.ps1"
                execution_time = $timestamp
                powershell_version = $global:PSVersionTable.PSVersion.ToString()
                os_version = [System.Environment]::OSVersion.ToString()
                machine_name = [System.Environment]::MachineName
                user_domain = [System.Environment]::UserDomainName
                user_name = [System.Environment]::UserName
            }
            tags = @("test", "validation", "powershell", "webhook", "integration")
            metrics = @{
                response_time_ms = 0
                payload_size_bytes = 0
                test_iteration = 1
            }
            additional_data = @{
                test_scenarios = @("basic_connectivity", "data_validation", "error_handling")
                expected_outcomes = @("successful_processing", "proper_logging", "correct_response")
                validation_rules = @("schema_compliance", "data_integrity", "response_format")
            }
        }
    }
    
    # Webhook„Å´„É™„ÇØ„Ç®„Çπ„Éà„ÇíÈÄÅ‰ø°
    [TestResult] SendWebhook([hashtable]$payload, [string]$testName) {
        $result = [TestResult]::new($testName)
          try {
            Write-ColorLog "üì§ Sending $testName test..." -Color Cyan
            
            # „Éö„Ç§„É≠„Éº„Éâ„Çµ„Ç§„Ç∫„ÇíË®àÁÆó
            $payloadJson = $payload | ConvertTo-Json -Depth 10 -Compress
            $payloadSize = [System.Text.Encoding]::UTF8.GetByteCount($payloadJson)
            
            Write-Verbose "Payload size: $payloadSize bytes"
            Write-Verbose "Payload preview: $($payloadJson.Substring(0, [Math]::Min(200, $payloadJson.Length)))..."
            
            # „Çø„Ç§„Éû„ÉºÈñãÂßã
            $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
            
            # HTTP „É™„ÇØ„Ç®„Çπ„ÉàÈÄÅ‰ø°
            $response = Invoke-RestMethod -Uri $this.WebhookUrl -Method Post -Body $payloadJson -ContentType "application/json" -TimeoutSec 30
            
            # „Çø„Ç§„Éû„ÉºÂÅúÊ≠¢
            $stopwatch.Stop()
            $elapsedMs = $stopwatch.ElapsedMilliseconds
            
            # ÁµêÊûú„ÇíË®òÈå≤
            $result.Success = $true
            $result.StatusCode = 200  # Invoke-RestMethod „ÅØÊàêÂäüÊôÇ„ÅÆ„ÅøÂà∞ÈÅî
            $result.Response = ($response | ConvertTo-Json -Depth 3 -Compress)
            
            Write-ColorLog "   ‚úÖ Success ($elapsedMs ms)" -Color Green
            Write-ColorLog "   üìù Response: $($result.Response)" -Color White
            
            # „É°„Éà„É™„ÇØ„Çπ„ÇíÊõ¥Êñ∞ÔºàÊ±éÁî®ÂΩ¢Âºè„ÅÆÂ†¥ÂêàÔºâ
            if ($testName -eq "Generic Format" -and $payload.ContainsKey("metrics")) {
                $payload.metrics.response_time_ms = $elapsedMs
                $payload.metrics.payload_size_bytes = $payloadSize
            }
            
        }
        catch {
            $result.Success = $false
            $result.ErrorMessage = $_.Exception.Message
            
            if ($_.Exception -is [System.Net.WebException]) {
                $webException = [System.Net.WebException]$_.Exception
                if ($webException.Response) {
                    $result.StatusCode = [int]$webException.Response.StatusCode
                    
                    try {
                        $reader = New-Object System.IO.StreamReader($webException.Response.GetResponseStream())
                        $result.Response = $reader.ReadToEnd()
                        $reader.Close()
                    }
                    catch {
                        $result.Response = "Unable to read response"
                    }
                }
            }
            
            Write-ColorLog "   ‚ùå Failed: $($result.ErrorMessage)" -Color Red
            if ($result.StatusCode -gt 0) {
                Write-ColorLog "   üìä Status Code: $($result.StatusCode)" -Color Yellow
            }
            if ($result.Response) {
                Write-ColorLog "   üìù Response: $($result.Response)" -Color White
            }
        }
        
        return $result
    }
    
    # ÊåáÂÆö„Åï„Çå„Åü„ÉÜ„Çπ„Éà„Çø„Ç§„Éó„ÇíÂÆüË°å
    [TestResult] RunSingleTest([string]$testType) {
        $payload = $null
        $testName = ""
        
        switch ($testType.ToLower()) {
            "discord" {
                $payload = $this.GetDiscordPayload()
                $testName = "Discord Embed"
            }
            "statuspage" {
                $payload = $this.GetStatusPagePayload()
                $testName = "Status Page"
            }
            "generic" {
                $payload = $this.GetGenericPayload()
                $testName = "Generic Format"
            }
            default {
                throw "Invalid test type: $testType"
            }
        }
        
        $result = $this.SendWebhook($payload, $testName)
        $this.Results.Add($result)
        return $result
    }
    
    # „Åô„Åπ„Å¶„ÅÆ„ÉÜ„Çπ„Éà„ÇíÂÆüË°å
    [void] RunAllTests() {
        $tests = @("discord", "statuspage", "generic")
        
        Write-ColorLog "üöÄ Starting VRChat Webhook Tests..." -Color Magenta
        Write-ColorLog "üîó Target URL: $($this.WebhookUrl)" -Color Yellow
        Write-ColorLog "‚è±Ô∏è  Delay between tests: $($this.DelaySeconds) seconds" -Color Gray
        Write-Host ""
        
        for ($i = 0; $i -lt $tests.Count; $i++) {
            $testType = $tests[$i]
            
            Write-ColorLog "üìã Test $($i + 1)/$($tests.Count): $testType" -Color Blue
            
            try {
                $this.RunSingleTest($testType)
            }
            catch {
                Write-ColorLog "   üí• Test setup failed: $($_.Exception.Message)" -Color Red
                
                $failedResult = [TestResult]::new($testType)
                $failedResult.ErrorMessage = $_.Exception.Message
                $this.Results.Add($failedResult)
            }
            
            # ÊúÄÂæå„ÅÆ„ÉÜ„Çπ„Éà‰ª•Â§ñ„ÅØÂæÖÊ©ü
            if ($i -lt ($tests.Count - 1)) {
                Write-ColorLog "   ‚è≥ Waiting $($this.DelaySeconds) seconds..." -Color Gray
                Start-Sleep -Seconds $this.DelaySeconds
            }
            
            Write-Host ""
        }
    }
    
    # „ÉÜ„Çπ„ÉàÁµêÊûú„ÅÆ„Çµ„Éû„É™„Éº„ÇíË°®Á§∫
    [void] ShowSummary() {
        Write-ColorLog "üìä Test Results Summary" -Color Magenta
        Write-ColorLog ("=" * 50) -Color Gray
        
        $successful = 0
        $failed = 0
        
        foreach ($result in $this.Results) {
            $status = if ($result.Success) { "‚úÖ PASS" } else { "‚ùå FAIL" }
            $statusColor = if ($result.Success) { [ConsoleColor]::Green } else { [ConsoleColor]::Red }
            
            Write-ColorLog "$($result.TestName.PadRight(20)): " -Color White -NoNewline
            Write-ColorLog $status -Color $statusColor
            
            if ($result.Success) {
                $successful++
            } else {
                $failed++
                if ($result.ErrorMessage) {
                    Write-ColorLog "  ‚îî‚îÄ Error: $($result.ErrorMessage)" -Color Red
                }
            }
        }
        
        Write-Host ""
        Write-ColorLog "üìà Total Results:" -Color Cyan
        Write-ColorLog "   ‚úÖ Successful: $successful" -Color Green
        Write-ColorLog "   ‚ùå Failed: $failed" -Color Red
        Write-ColorLog "   üìä Success Rate: $([Math]::Round(($successful / $this.Results.Count) * 100, 1))%" -Color Yellow
        
        if ($failed -eq 0) {
            Write-ColorLog "üéâ All tests passed successfully!" -Color Green
        } else {
            Write-ColorLog "‚ö†Ô∏è  Some tests failed. Please check the errors above." -Color Yellow
        }
    }
    
    # Ë©≥Á¥∞„É¨„Éù„Éº„Éà„Çí„Éï„Ç°„Ç§„É´„Å´Âá∫Âäõ
    [void] SaveDetailedReport([string]$outputPath) {
        $reportData = @{
            timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            webhook_url = $this.WebhookUrl
            total_tests = $this.Results.Count
            successful_tests = ($this.Results | Where-Object { $_.Success }).Count
            failed_tests = ($this.Results | Where-Object { -not $_.Success }).Count
            results = $this.Results | ForEach-Object {
                @{
                    test_name = $_.TestName
                    success = $_.Success
                    status_code = $_.StatusCode
                    response = $_.Response
                    error_message = $_.ErrorMessage
                    timestamp = $_.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")
                }
            }
        }
        
        $reportJson = $reportData | ConvertTo-Json -Depth 10
        Set-Content -Path $outputPath -Value $reportJson -Encoding UTF8
        
        Write-ColorLog "üìÑ Detailed report saved to: $outputPath" -Color Cyan
    }
}

# URL Ê§úË®ºÈñ¢Êï∞
function Test-WebhookUrl {
    param([string]$Url)
    
    try {
        $uri = [System.Uri]::new($Url)
        if ($uri.Scheme -notin @("http", "https")) {
            return $false
        }
        if ($uri.Host -eq "") {
            return $false
        }
        return $true
    }
    catch {
        return $false
    }
}

# „É°„Ç§„É≥ÂÆüË°åÈÉ®ÂàÜ
function Main {
    Write-ColorLog "üîß VRChat Webhook Tester v1.0" -Color Magenta
    Write-ColorLog "=" * 50 -Color Gray
    
    # URLÊ§úË®º
    if (-not (Test-WebhookUrl -Url $WebhookUrl)) {
        Write-ColorLog "‚ùå Invalid webhook URL format: $WebhookUrl" -Color Red
        Write-ColorLog "   Expected format: https://script.google.com/macros/s/SCRIPT_ID/exec" -Color Yellow
        exit 1
    }
    
    # „ÉÜ„Çπ„Çø„ÉºÂàùÊúüÂåñ
    $tester = [VRChatWebhookTester]::new($WebhookUrl, $DelaySeconds)
    
    try {
        if ($TestType -eq "all") {
            $tester.RunAllTests()
        } else {
            Write-ColorLog "üöÄ Running single test: $TestType" -Color Magenta
            Write-ColorLog "üîó Target URL: $WebhookUrl" -Color Yellow
            Write-Host ""
            
            $tester.RunSingleTest($TestType)
        }
        
        # ÁµêÊûúË°®Á§∫
        $tester.ShowSummary()
        
        # Ë©≥Á¥∞„É¨„Éù„Éº„Éà‰øùÂ≠òÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
        if ($VerbosePreference -eq "Continue") {
            $reportPath = "VRChatWebhook_TestReport_$(Get-Date -Format 'yyyyMMdd_HHmmss').json"
            $tester.SaveDetailedReport($reportPath)
        }
        
        # ÁµÇ‰∫Ü„Ç≥„Éº„ÉâË®≠ÂÆö
        $failedCount = ($tester.Results | Where-Object { -not $_.Success }).Count
        if ($failedCount -gt 0) {
            exit 1
        } else {
            exit 0
        }
    }
    catch {
        Write-ColorLog "üí• Unexpected error occurred: $($_.Exception.Message)" -Color Red
        Write-ColorLog "üìç Stack trace:" -Color Yellow
        Write-ColorLog $_.ScriptStackTrace -Color Gray
        exit 2
    }
}

# „Çπ„ÇØ„É™„Éó„ÉàÊÉÖÂ†±Ë°®Á§∫Èñ¢Êï∞
function Show-Help {
    Write-Host @"
üîß VRChat Webhook Tester v1.0

DESCRIPTION:
    Google Apps Script „Åß‰ΩúÊàê„Åó„Åü VRChat ÈöúÂÆ≥ÈÄöÁü• Webhook „É¨„Ç∑„Éº„Éê„Éº„ÅÆÂãï‰Ωú„ÇíÊ§úË®º„Åó„Åæ„Åô„ÄÇ

USAGE:
    .\Test-VRChatWebhook.ps1 -WebhookUrl <URL> [-TestType <TYPE>] [-DelaySeconds <SECONDS>] [-Verbose]

PARAMETERS:
    -WebhookUrl     : „ÉÜ„Çπ„ÉàÂØæË±°„ÅÆ Webhook URL (ÂøÖÈ†à)
    -TestType       : „ÉÜ„Çπ„Éà„ÅÆÁ®ÆÈ°û (discord, statuspage, generic, all) [„Éá„Éï„Ç©„É´„Éà: all]
    -DelaySeconds   : „ÉÜ„Çπ„ÉàÈñì„ÅÆÂæÖÊ©üÊôÇÈñìÔºàÁßíÔºâ [„Éá„Éï„Ç©„É´„Éà: 2]
    -Verbose        : Ë©≥Á¥∞„É≠„Ç∞„ÅÆÂá∫Âäõ„Å®ÁµêÊûú„É¨„Éù„Éº„Éà„Éï„Ç°„Ç§„É´„ÅÆÁîüÊàê

EXAMPLES:
    .\Test-VRChatWebhook.ps1 -WebhookUrl "https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec"
    .\Test-VRChatWebhook.ps1 -WebhookUrl "https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec" -TestType discord
    .\Test-VRChatWebhook.ps1 -WebhookUrl "https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec" -Verbose

"@
}

# „Éò„É´„ÉóË°®Á§∫Âà§ÂÆö
if ($args -contains "-h" -or $args -contains "--help" -or $args -contains "/?" -or $args -contains "/h") {
    Show-Help
    exit 0
}

# „É°„Ç§„É≥ÂÆüË°å
Main
